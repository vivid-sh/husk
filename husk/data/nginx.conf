events {
	worker_connections  1024;
}

http {
	map_hash_bucket_size 128;

	map $request_uri $tagged_manifest {
		include /app/manifests/tags.map;
	}

	map $request_uri $blob_image_source {
		include /app/blobs/remote_blobs.map;
	}

	server {
		listen 8000;
		server_name localhost;

		location = /v2/ {
			add_header 'Docker-Distribution-Api-Version' '2.0' always;
			add_header 'X-Content-Type-Options' 'nosniff' always;

			default_type 'application/json';
			return 200 '{}';
		}

		location ~ "^\/v2\/(.*)\/manifests\/(sha256:[A-Fa-f0-9]{64}|[A-Za-z0-9_][A-Za-z0-9_.-]*)$" {
			if ($tagged_manifest) {
				return 301 $tagged_manifest;
			}

			default_type 'application/vnd.oci.image.manifest.v1+json';
			add_header 'ETag' '$2' always;
			add_header 'Docker-Content-Digest' '$2' always;
			add_header 'Docker-Distribution-Api-Version' 'registry/2.0';
			add_header 'X-Content-Type-Options' 'nosniff';

			root /app/manifests;
			# TODO: add error page handler here to give custom 404 response
			try_files '/$1/$2' =404;
		}

		location ~ "^\/v2\/(.*)\/blobs\/sha256:([A-Fa-f0-9]{64})$" {
			default_type 'application/octet-stream';
			add_header 'ETag' '$2' always;
			add_header 'Cache-Control' 'max-age=31536000';
			add_header 'Docker-Content-Digest' '$2' always;
			add_header 'Docker-Distribution-Api-Version' 'registry/2.0';
			add_header 'X-Content-Type-Options' 'nosniff';

			set $blob_sha $2;

			root /app/blobs;
			try_files '/$2' @blob_redirect;
		}

		location @blob_redirect {
			if ($blob_image_source) {
				return 301 'https://husk-blob-redirector.husk-blob-redirector.workers.dev/v2/$blob_image_source/blobs/sha256:$blob_sha';
			}

			# TODO: return a spec compliant error message
			return 404 '{}';
		}

		location ~ ^\/v2\/.* {
			# TODO: return a spec compliant error message
			return 400 '{}';
		}
	}
}
